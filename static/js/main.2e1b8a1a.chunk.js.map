{"version":3,"sources":["Table/Tally.js","Table/Maha.js","Time.js","News/News.js","App.js","serviceWorker.js","index.js"],"names":["Tally","props","state","status","fetch","response","json","data","console","log","statewise","this","setState","Object","entries","align","map","list","index","confirmed","active","recovered","deaths","Component","Maha","district","responce","Maharashtra","districtData","Time","moment","format","News","news","articles","class","className","source","name","title","description","href","url","src","urlToImage","width","height","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yVAuDeA,G,8DAlDX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAM,CACPC,OAAO,IAHG,E,wLAQJ,yC,SACYC,MADZ,0C,cACJC,E,gBACYA,EAASC,O,OAArBC,E,OACNC,QAAQC,IAAIF,EAAKG,WACjBC,KAAKC,SAAS,CAACT,OAASU,OAAOC,QAAQP,EAAKG,aAG5CF,QAAQC,IAAIE,KAAKT,MAAMC,OAAO,GAAG,I,sIAIjC,OACQ,2BAAOY,MAAM,UACT,4BACI,qCACA,qCACA,yCACA,sCACA,yCACA,uCAECJ,KAAKT,MAAMC,OAAOa,KAAI,SAACC,EAAKC,GAAN,OAEnB,4BACI,4BAAKA,GAAY,GACpB,4BAAMD,EAAK,GAAGf,OACnB,4BAAKe,EAAK,GAAGE,WACb,4BAAKF,EAAK,GAAGG,QACb,4BAAKH,EAAK,GAAGI,WACb,4BAAKJ,EAAK,GAAGK,YAIb,kC,GA1CJC,cCmDHC,E,kDArDb,WAAYvB,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACfuB,SAAW,IAHO,E,wLASR,wD,SACarB,MADb,yD,cACJsB,E,gBACeA,EAASpB,O,OAAvBC,E,OACPI,KAAKC,SAAS,CAACa,SAAUZ,OAAOC,QAAQP,EAAKoB,YAAYC,gBAQ3DpB,QAAQC,IAAIE,KAAKT,MAAMuB,U,qIAKrB,OAGE,2BAAOV,MAAM,QACT,4BACI,qCACA,wCACA,0CAGHJ,KAAKT,MAAMuB,SAAST,KAAI,SAACC,EAAKC,GAAN,OAEvB,4BACI,4BAAKA,GAAY,GACvB,gCAAMD,EAAK,IAFT,IAEkB,4BAAKA,EAAK,GAAGE,oB,GAxCxBI,a,iBCeJM,E,uKAPP,OACI,6BACL,gCAAOC,MAASC,OAAO,iC,GAPXR,aCsDJS,G,wDAtDf,WAAY/B,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAO,CACR+B,KAAK,IAHK,E,wLAQJ,yG,SACY7B,MADZ,0G,cACJsB,E,gBACYA,EAASpB,O,OAArBC,E,OAENI,KAAKC,SAAS,CAACqB,KAAO1B,EAAK2B,WAC3B1B,QAAQC,IAAIE,KAAKT,MAAM+B,M,qIAIlB,OAKC,6BAASE,MAAM,eACX,wBAAIA,MAAM,qBAAV,QAEGxB,KAAKT,MAAM+B,KAAKjB,KAAI,SAACkB,GAAD,OACvB,6BAASE,UAAU,mCACtB,yBAAKA,UAAU,gCACX,yBAAKD,MAAM,yCACX,gCAAMD,EAASG,OAAOC,MAC1B,wBAAIH,MAAM,2BACLD,EAASK,OAGd,uBAAGJ,MAAM,2BACJD,EAASM,aAEd,uBAAIC,KAAMP,EAASQ,KAAnB,mBAEA,yBAAMP,MAAM,sDACP,yBAAKQ,IAAKT,EAASU,WAAYC,MAAM,MAAMC,OAAO,MAAMV,UAAU,kB,GAzC/Db,cC0BJwB,E,uKAdb,OAEE,6BAEC,kBAAC,EAAD,MACA,kBAAC,EAAD,MACH,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAVgBxB,aCAEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzD,QAAQyD,MAAMA,EAAMC,c","file":"static/js/main.2e1b8a1a.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Tally.css'\r\nimport FlexLayout from \"flexlayout-react\";\r\n\r\nclass Tally extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            status:[]\r\n        }\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const url=\"https://api.covid19india.org/data.json\";\r\n        const response =await fetch(url);\r\n        const data =await response.json();\r\n        console.log(data.statewise);\r\n        this.setState({status : Object.entries(data.statewise)});\r\n        //this.setState({status :Object.defineProperties(data.statewise)})\r\n        //console.log(this.state.status);\r\n        console.log(this.state.status[0][1]);\r\n\r\n    }\r\n    render(){\r\n        return(\r\n                <table align='center'>\r\n                    <tr>\r\n                        <th>sr no</th>\r\n                        <th>State</th>\r\n                        <th>Confirmed</th>\r\n                        <th>Active</th>\r\n                        <th>Recovered</th>\r\n                        <th>Deaths</th>\r\n                        </tr>\r\n                        {this.state.status.map((list,index)=>\r\n                        (\r\n                            <tr>\r\n                                <td>{index=index+1}</td>\r\n                             <td >{list[1].state}</td>\r\n                        <td>{list[1].confirmed}</td>\r\n                        <td>{list[1].active}</td>\r\n                        <td>{list[1].recovered}</td>\r\n                        <td>{list[1].deaths}</td>\r\n                        \r\n                            </tr>\r\n                        ))}\r\n                        <tr>\r\n                            \r\n                        </tr>\r\n                </table>\r\n\r\n        );\r\n    }\r\n\r\n}\r\nexport default Tally;","import React, { Component } from 'react'\r\nclass Maha extends Component {\r\n    constructor(props){\r\n      super(props)\r\n      this.state = {\r\n    district : [],\r\n    \r\n  };\r\n    }\r\n  \r\n  async componentDidMount(){\r\n    const url=\"https://api.covid19india.org/state_district_wise.json\";\r\n    const responce = await fetch(url);\r\n     const data =  await responce.json();\r\n    this.setState({district: Object.entries(data.Maharashtra.districtData)});\r\n    //console.log(Object.entries(this.state.district));\r\n    //const city =Object.entries(this.state.district); \r\n    //let mymap = new Map();\r\n    //for(let i=0;i<city.length;i++){\r\n      //  console.log(city[i][0]);\r\n       // mymap.set(city[i][0],city[i][1].confirmed)\r\n   // }//\r\n  console.log(this.state.district);\r\n  \r\n  }\r\n\r\n  render(){\r\n    return(\r\n    \r\n    \r\n      <table align='left'>\r\n          <tr>\r\n              <th>sr no</th>\r\n              <th>District</th>\r\n              <th>Confirmed</th>\r\n          </tr>\r\n      \r\n          {this.state.district.map((list,index) =>\r\n        (\r\n            <tr >\r\n                <td>{index=index+1}</td>\r\n          <td> {list[0]}</td> <td>{list[1].confirmed}</td>\r\n          \r\n          </tr>\r\n          \r\n        \r\n        ))}\r\n      \r\n    \r\n    </table>\r\n    );\r\n  }\r\n  \r\n  }\r\n  \r\n  export default Maha;\r\n  ","\r\nimport moment from \"moment\"\r\nimport React,{ Component } from \"react\";\r\n\r\nclass Time extends Component{\r\n\r\n    \r\n       render() {\r\n         \r\n        return (\r\n            <div>\r\n       <h1> { moment().format('MMMM Do YYYY, h:mm:ss a')}</h1>\r\n       </div>\r\n        )}\r\n}\r\n\r\nexport default Time;","import React,{Component} from 'react'\r\nimport './news.css'\r\n\r\nclass News extends Component{\r\nconstructor(props){\r\n    super(props);\r\n    this.state ={\r\n        news:[]\r\n    }\r\n}\r\n\r\nasync componentDidMount(){\r\n    const url='http://newsapi.org/v2/top-headlines?country=in&category=health&apiKey=254af5c7543644ea95f7480f596cec11';\r\n    const responce =await fetch(url);\r\n    const data =await responce.json();\r\n \r\n    this.setState({news : data.articles})\r\n    console.log(this.state.news)\r\n\r\n}\r\n\r\nrender(){return (\r\n\r\n      \r\n       \r\n      \r\n          <section class=\"mw7 right  \">\r\n              <h2 class=\"athelas ph3 ph0-l\">News</h2>\r\n             \r\n               { this.state.news.map((articles)=>(\r\n              <article className=\"pv4 bt bb b--black-10 ph3 ph0-l\">    \r\n           <div className=\"flex flex-column flex-row-ns\">\r\n               <div class=\"w-10 w-6-ns pr3-ns order-2 order-1-ns\">\r\n               <h4> {articles.source.name}</h4>\r\n           <h3 class=\"f3 athelas mt0 lh-title\" >\r\n               {articles.title}\r\n           </h3>\r\n          \r\n           <p class=\"f5 f4-l lh-copy athelas\">\r\n               {articles.description}\r\n           </p>\r\n           <a  href={articles.url}>Click For more</a>\r\n           </div >\r\n           <div  class=\"pl3-ns order-1 order-2-ns mb4 mb0-ns w-100 w-40-ns\"> \r\n                <img src={articles.urlToImage} width='500' height='250' className='db'></img>\r\n\r\n           </div>\r\n           </div> \r\n           </article> ) )}\r\n           \r\n          \r\n     </section>\r\n  \r\n  \r\n)\r\n} \r\n    \r\n}\r\nexport default News;","import React, { Component } from 'react';\n\nimport './App.css';\nimport Tally from './Table/Tally'\nimport Maha from './Table/Maha'\nimport moment from 'moment';\nimport Time from './Time';\nimport News from './News/News'\n\n\n\n\nclass App extends Component{\n  \nrender(){\n  return(\n  \n    <div >\n\n     <Time></Time>\n     <News></News>\n  <Maha></Maha>\n  <Tally></Tally>\n  \n  </div>);\n\n}\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}